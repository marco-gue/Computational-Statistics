---
title: "Homework 2"
subtitle: "Prof: Luiz Peternelli"
author: "Marco Guerra Hinostroza"
date: "`r Sys.Date()`"
format:
  html:
    embed-resources: true
    toc: true
    toc-location: left
    number-sections: false
    code-fold: false
    filters:
        - highlight-text
editor_options: 
  chunk_output_type: console
---
# Discrete random variable

### $E(X)$

$$
E(X) = \left( 0 \cdot\frac{1}{4} \right) + \left( 1 \cdot\frac{1}{2} \right) + \left( 2 \cdot\frac{1}{4} \right) = 0 + \frac{1}{2} + \frac{1}{4} = 1
$$

### Cumulative distribution function

$$
F(X) = P(X \leq x)
$$

* $x < 0$  ;  $F(X) = 0$

* $0 \leq x < 1$  ;  $F(X) = P(0) = 1/4$

* $1 \leq x < 2$  ;  $F(X) = P(0) + P(1) = 1/4 +1/2 = 3/4$

* $x \leq 2$  ;  $F(X) = P(0) + P(1) + P(2)= 1/4+1/2+1/4 = 1$

### Simulations
```{r}
# Definindo as probabilidades e valores
x <- c(0, 1, 2)
p <- c(1/4, 1/2, 1/4)

# Função para simular observações e calcular erros
sim_obs <- function(n) {
  u <- runif(n)  # Gera números uniformes
  x_sim <- ifelse(u < 1/4, 0, ifelse(u < 3/4, 1, 2))  # Atribui valores de X
  f <- table(x_sim)  # Contagem das frequências
  fr <- f / n  # Frequência relativa

  # Gráfico de colunas
  barplot(fr, 
          names.arg = x, 
          col = "#4682B4", 
          main = paste("Relative frequency of observations (n =", n, ")"),
          xlab = "Values of X", 
          ylab = "Relative frequency", 
          ylim = c(0, 1))
  
  # relative errors
  re <- abs(fr - p)
  return(re)
}
```


```{r}
# c) Simulação para 20 observações
cat("relative errors (n=20):", sim_obs(20), "\n")

# d) Simulação para 100 observações
cat("relative errors (n=100):", sim_obs(100), "\n")

# e) Simulação para 500 observações
cat("relative errors (n=500):", sim_obs(500), "\n")

```


# Continuous random variable

### Probability density function
```{r}
# Definir a função densidade de probabilidade f(y)
f_y <- function(y) {
  ifelse(y >= 0 & y <= 1, (2/3) * (y + 1), 0)
}

# Gerar uma sequência de valores de y para o gráfico
y_values <- seq(0, 1, by = 0.01)
f_values <- sapply(y_values, f_y)

# Fazer o gráfico da fdp
plot(y_values, f_values, type = "l", col = "blue", lwd = 2,
     xlab = "y", ylab = "f(y)", main = "Probability density function of Y")
abline(h = 0, col = "gray", lty = 2)

```


:::: {.columns}
::: {.column width="50%"}
### Mean
$$
E(Y) = \left( \int_0^1 y \cdot \frac{2}{3}(y+1) \, dy \right)
$$

$$
E(Y) = \frac{2}{3}\left( \int_0^1 y^2 \, dy + \int_0^1 y \, dy \right)
$$

$$
E(Y) = \frac{2}{3} \left( \frac{1}{3} + \frac{1}{2} \right) = 0.5555
$$
:::

::: {.column width="50%"}
### Variance
$$
\text{Var}(Y) = E(Y^2) - [E(Y)]^2
$$

```{r}
# Define f(y)
f <- function(y) (2/3) * (y + 1)

# Expected value E(Y)
E_Y <- integrate(function(y) y * f(y), 0, 1)$value

# Expected value E(Y^2)
E_Y2 <- integrate(function(y) y^2 * f(y), 0, 1)$value

# Variance
variance_Y <- E_Y2 - E_Y^2
variance_Y

```
:::
::::

### Cumulative distribution function (CDF)

We can integrate this to find the CDF, $F(y)$.

To find $F(y)$, we integrate $f(y)$ from $0$ to $y$:

$$
F(y) = \int_{0}^{y} f(t) \, dt = \int_{0}^{y} \frac{2}{3}(t + 1) \, dt.
$$

Thus,

$$
F(y) = \frac{2}{3} \int_{0}^{y} (t + 1) \, dt.
$$

Solving this integral:

$$
\int (t + 1) \, dt = \frac{t^2}{2} + t
$$

Therefore,

$$
F(y) = \frac{2}{3} \left[ \frac{t^2}{2} + t \right]_{0}^{y} = \frac{2}{3} \left( \frac{y^2}{2} + y \right).
$$

Simplifying gives:

$$
F(y) = \frac{2}{3} \left( \frac{y^2}{2} + y \right) = \frac{y^2}{3} + \frac{2y}{3}.
$$


Thus, for the CDF, we have:

$$
F(y) = 
\begin{cases} 
0 & ; \quad y < 0, \\
\frac{y^2}{3} + \frac{2y}{3} & ; \quad 0 \leq y \leq 1, \\
1 & ; \quad y > 1.
\end{cases}
$$

```{r}
# Define the cumulative distribution function F(y)
F_y <- function(y) {
  ifelse(y < 0, 0,
         ifelse(y <= 1, (y^2 / 3) + (2 * y / 3), 1))
}

# Generate a sequence of y values for plotting
y_values <- seq(-0.5, 1.5, by = 0.01)
F_values <- sapply(y_values, F_y)

# Plot the CDF
plot(y_values, F_values, type = "l", col = "blue", lwd = 2,
     xlab = "y", ylab = "F(y)", main = "Cumulative Distribution Function of Y")
abline(h = 0:1, col = "gray", lty = 2)
```

