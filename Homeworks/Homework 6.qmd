---
title: "Homework 6"
subtitle: "Prof: Luiz Peternelli"
author: "Marco Guerra Hinostroza"
date: "`r Sys.Date()`"
format:
  html:
    embed-resources: true
    toc: true
    toc-location: left
    number-sections: false
    code-fold: false
    filters:
        - highlight-text
editor_options: 
  chunk_output_type: console
---

## Tópicos de probabilidade

### Question 01

$$
c = \{m,m,f,f\}
$$

**Ambos so tomados simultaneamente**
```{r}
prob1a <- function(iter)
{
k <- iter
saida <- seq(1:k)
caixa <- c("m","m","f","f")
for (i in 1:k)
	{
	caixa2 <- sample(caixa)
	a <- caixa2[1]
	b <- caixa2[2]
	comparar <- a==b
	if(comparar==TRUE){saida[i]<-"yes"}else{saida[i]<-"no"}
	}
saida2 <- saida=="yes"
saida3 <- 1*saida2
proporcao <- mean(saida3)
return(proporcao)
}
```

```{r}
prob1a(1000)
```

**Con reposición**
```{r}
prob1b <- function(iter)
{
k <- iter
saida <- seq(1:k)
caixa <- c("m","m","f","f")
for (i in 1:k)
	{
	caixa2 <- sample(caixa,replace=T)
	a <- caixa2[1]
	b <- caixa2[2]
	comparar <- a==b
	if(comparar==TRUE){saida[i] <- "sim"}else{saida[i] <- "nao"}
	}
saida2 <- saida=="sim"
saida3 <- 1*saida2
proporcao <- mean(saida3)
return(proporcao)
}
```

```{r}
prob1b(1000)
```

### Question 02

$$
c = \{m,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f\}
$$

**Ambos so tomados simultaneamente**
```{r}
prob2a <- function(iter)
{
k <- iter
saida <- NULL
caixa <- c(rep("m",1),rep("f",19))
for (i in 1:k)
	{
	caixa2 <- sample(caixa,replace=F)
	a <- caixa2[1]
	b <- caixa2[2]
	comparar <- a==b
	if(comparar==TRUE){saida[i] <- "sim"}else{saida[i] <- "nao"}
	}
saida2 <- saida=="sim"
saida3 <- 1*saida2
proporcao <- mean(saida3)
return(proporcao)
}
```

```{r}
prob2a(1000)
```

**Con reposición**
```{r}
prob2b <- function(iter)
{
k <- iter
saida <- NULL
caixa <- c(rep("m",1),rep("f",19))
for (i in 1:k)
	{
	caixa2 <- sample(caixa,replace=T)
	a <- caixa2[1]
	b <- caixa2[2]
	comparar <- a==b
	if(comparar==TRUE){saida[i] <- "sim"}else{saida[i] <- "nao"}
	}
saida2 <- saida=="sim"
saida3 <- 1*saida2
proporcao <- mean(saida3)
return(proporcao)
}
```

```{r}
prob2b(1000)
```

### Question 03

**prob1a**
```{r}
y <- NULL
pontox <- c(50,100,150,200,250,300, 400, 500)
for(i in 1:length(pontox))
  {
  y[i] <- prob1a(pontox[i])
}
y
plot(pontox,y)
lines(pontox,y)
abline(h=1/3,lty=3,col="red")
```

**prob1b**
```{r}
y <- NULL
pontox <- c(50,100,150,200,250,300, 400, 500)
for(i in 1:length(pontox))
  {
  y[i] <- prob1b(pontox[i])
}
y
plot(pontox,y)
lines(pontox,y)
abline(h=0.50,lty=3,col="red")
```

**prob2a**
```{r}
y <- NULL
pontox <- c(50,100,150,200,250,300, 400, 500)
for(i in 1:length(pontox))
  {
  y[i] <- prob2a(pontox[i])
}
y
plot(pontox,y)
lines(pontox,y)
abline(h=0.90,lty=3,col="red")
```

**prob2b**
```{r}
y <- NULL
pontox <- c(50,100,150,200,250,300, 400, 500)
for(i in 1:length(pontox))
  {
  y[i] <- prob2b(pontox[i])
}
y
plot(pontox,y)
lines(pontox,y)
abline(h=0.90,lty=3,col="red")
```

### Question 04
```{r}
simulaMx <- function(numero.de.simulacoes,funcao.inicial,numero.de.iteracoes)
  {
  m <- numero.de.simulacoes
  n <- numero.de.iteracoes
  funcao <- funcao.inicial
  saida <- NULL
  
  for(i in 1:m)
    {
    saida[i] <- funcao(n)
    }
  return(saida)
}
```

#### prob1a
:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j1<-simulaMx(100,prob1a,50)
hist(j1,xlim=c(0.1,0.6),xlab="k=50")
abline(v=mean(j1),col="red")
abline(v=mean(j1)-sd(j1),col="blue", lty = "dashed")
abline(v=mean(j1)+sd(j1),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j2<-simulaMx(100,prob1a,100)
hist(j2,xlim=c(0.1,0.6),xlab="k=100")
abline(v=mean(j2),col="red")
abline(v=mean(j2)-sd(j2),col="blue", lty = "dashed")
abline(v=mean(j2)+sd(j2),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j3<-simulaMx(100,prob1a,150)
hist(j3,xlim=c(0.1,0.6),xlab="k=150")
abline(v=mean(j3),col="red")
abline(v=mean(j3)-sd(j3),col="blue", lty = "dashed")
abline(v=mean(j3)+sd(j3),col="blue", lty = "dashed")

```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j4<-simulaMx(100,prob1a,200)
hist(j4,xlim=c(0.1,0.6),xlab="k=200")
abline(v=mean(j4),col="red")
abline(v=mean(j4)-sd(j4),col="blue", lty = "dashed")
abline(v=mean(j4)+sd(j4),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j5<-simulaMx(100,prob1a,250)
hist(j5,xlim=c(0.1,0.6),xlab="k=250")
abline(v=mean(j5),col="red")
abline(v=mean(j5)-sd(j5),col="blue", lty = "dashed")
abline(v=mean(j5)+sd(j5),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j6<-simulaMx(100,prob1a,300)
hist(j6,xlim=c(0.1,0.6),xlab="k=300")
abline(v=mean(j6),col="red")
abline(v=mean(j6)-sd(j6),col="blue", lty = "dashed")
abline(v=mean(j6)+sd(j6),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j7<-simulaMx(100,prob1a,400)
hist(j7,xlim=c(0.1,0.6),xlab="k=400")
abline(v=mean(j7),col="red")
abline(v=mean(j7)-sd(j7),col="blue", lty = "dashed")
abline(v=mean(j7)+sd(j7),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j8<-simulaMx(100,prob1a,500)
hist(j8,xlim=c(0.1,0.6),xlab="k=500")
abline(v=mean(j8),col="red")
abline(v=mean(j8)-sd(j8),col="blue", lty = "dashed")
abline(v=mean(j8)+sd(j8),col="blue", lty = "dashed")
```
:::

::::

#### prob1b
:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j1<-simulaMx(100,prob1b,50)
hist(j1,xlim=c(0.3,0.7),xlab="k=50")
abline(v=mean(j1),col="red")
abline(v=mean(j1)-sd(j1),col="blue", lty = "dashed")
abline(v=mean(j1)+sd(j1),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j2<-simulaMx(100,prob1b,100)
hist(j2,xlim=c(0.3,0.7),xlab="k=100")
abline(v=mean(j2),col="red")
abline(v=mean(j2)-sd(j2),col="blue", lty = "dashed")
abline(v=mean(j2)+sd(j2),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j3<-simulaMx(100,prob1b,150)
hist(j3,xlim=c(0.3,0.7),xlab="k=150")
abline(v=mean(j3),col="red")
abline(v=mean(j3)-sd(j3),col="blue", lty = "dashed")
abline(v=mean(j3)+sd(j3),col="blue", lty = "dashed")

```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j4<-simulaMx(100,prob1b,200)
hist(j4,xlim=c(0.3,0.7),xlab="k=200")
abline(v=mean(j4),col="red")
abline(v=mean(j4)-sd(j4),col="blue", lty = "dashed")
abline(v=mean(j4)+sd(j4),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j5<-simulaMx(100,prob1b,250)
hist(j5,xlim=c(0.3,0.7),xlab="k=250")
abline(v=mean(j5),col="red")
abline(v=mean(j5)-sd(j5),col="blue", lty = "dashed")
abline(v=mean(j5)+sd(j5),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j6<-simulaMx(100,prob1b,300)
hist(j6,xlim=c(0.3,0.7),xlab="k=300")
abline(v=mean(j6),col="red")
abline(v=mean(j6)-sd(j6),col="blue", lty = "dashed")
abline(v=mean(j6)+sd(j6),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j7<-simulaMx(100,prob1b,400)
hist(j7,xlim=c(0.3,0.7),xlab="k=400")
abline(v=mean(j7),col="red")
abline(v=mean(j7)-sd(j7),col="blue", lty = "dashed")
abline(v=mean(j7)+sd(j7),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j8<-simulaMx(100,prob1b,500)
hist(j8,xlim=c(0.3,0.7),xlab="k=500")
abline(v=mean(j8),col="red")
abline(v=mean(j8)-sd(j8),col="blue", lty = "dashed")
abline(v=mean(j8)+sd(j8),col="blue", lty = "dashed")
```
:::

::::

#### prob2a
:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j1<-simulaMx(100,prob2a,50)
hist(j1,xlim=c(0.7,1.0),xlab="k=50")
abline(v=mean(j1),col="red")
abline(v=mean(j1)-sd(j1),col="blue", lty = "dashed")
abline(v=mean(j1)+sd(j1),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j2<-simulaMx(100,prob2a,100)
hist(j2,xlim=c(0.7,1.0),xlab="k=100")
abline(v=mean(j2),col="red")
abline(v=mean(j2)-sd(j2),col="blue", lty = "dashed")
abline(v=mean(j2)+sd(j2),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j3<-simulaMx(100,prob2a,150)
hist(j3,xlim=c(0.7,1.0),xlab="k=150")
abline(v=mean(j3),col="red")
abline(v=mean(j3)-sd(j3),col="blue", lty = "dashed")
abline(v=mean(j3)+sd(j3),col="blue", lty = "dashed")

```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j4<-simulaMx(100,prob2a,200)
hist(j4,xlim=c(0.7,1.0),xlab="k=200")
abline(v=mean(j4),col="red")
abline(v=mean(j4)-sd(j4),col="blue", lty = "dashed")
abline(v=mean(j4)+sd(j4),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j5<-simulaMx(100,prob2a,250)
hist(j5,xlim=c(0.7,1.0),xlab="k=250")
abline(v=mean(j5),col="red")
abline(v=mean(j5)-sd(j5),col="blue", lty = "dashed")
abline(v=mean(j5)+sd(j5),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j6<-simulaMx(100,prob2a,300)
hist(j6,xlim=c(0.7,1.0),xlab="k=300")
abline(v=mean(j6),col="red")
abline(v=mean(j6)-sd(j6),col="blue", lty = "dashed")
abline(v=mean(j6)+sd(j6),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j7<-simulaMx(100,prob2a,400)
hist(j7,xlim=c(0.7,1.0),xlab="k=400")
abline(v=mean(j7),col="red")
abline(v=mean(j7)-sd(j7),col="blue", lty = "dashed")
abline(v=mean(j7)+sd(j7),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j8<-simulaMx(100,prob2a,500)
hist(j8,xlim=c(0.7,1.0),xlab="k=500")
abline(v=mean(j8),col="red")
abline(v=mean(j8)-sd(j8),col="blue", lty = "dashed")
abline(v=mean(j8)+sd(j8),col="blue", lty = "dashed")
```
:::

::::

#### prob2b
:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j1<-simulaMx(100,prob2b,50)
hist(j1,xlim=c(0.7,1.0),xlab="k=50")
abline(v=mean(j1),col="red")
abline(v=mean(j1)-sd(j1),col="blue", lty = "dashed")
abline(v=mean(j1)+sd(j1),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j2<-simulaMx(100,prob2b,100)
hist(j2,xlim=c(0.7,1.0),xlab="k=100")
abline(v=mean(j2),col="red")
abline(v=mean(j2)-sd(j2),col="blue", lty = "dashed")
abline(v=mean(j2)+sd(j2),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j3<-simulaMx(100,prob2b,150)
hist(j3,xlim=c(0.7,1.0),xlab="k=150")
abline(v=mean(j3),col="red")
abline(v=mean(j3)-sd(j3),col="blue", lty = "dashed")
abline(v=mean(j3)+sd(j3),col="blue", lty = "dashed")

```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j4<-simulaMx(100,prob2b,200)
hist(j4,xlim=c(0.7,1.0),xlab="k=200")
abline(v=mean(j4),col="red")
abline(v=mean(j4)-sd(j4),col="blue", lty = "dashed")
abline(v=mean(j4)+sd(j4),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j5<-simulaMx(100,prob2b,250)
hist(j5,xlim=c(0.7,1.0),xlab="k=250")
abline(v=mean(j5),col="red")
abline(v=mean(j5)-sd(j5),col="blue", lty = "dashed")
abline(v=mean(j5)+sd(j5),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j6<-simulaMx(100,prob2b,300)
hist(j6,xlim=c(0.7,1.0),xlab="k=300")
abline(v=mean(j6),col="red")
abline(v=mean(j6)-sd(j6),col="blue", lty = "dashed")
abline(v=mean(j6)+sd(j6),col="blue", lty = "dashed")
```
:::

::::

:::: {.columns}

::: {.column width="49%"}
```{r, echo=FALSE}
j7<-simulaMx(100,prob2b,400)
hist(j7,xlim=c(0.7,1.0),xlab="k=400")
abline(v=mean(j7),col="red")
abline(v=mean(j7)-sd(j7),col="blue", lty = "dashed")
abline(v=mean(j7)+sd(j7),col="blue", lty = "dashed")
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r, echo=FALSE}
j8<-simulaMx(100,prob2b,500)
hist(j8,xlim=c(0.7,1.0),xlab="k=500")
abline(v=mean(j8),col="red")
abline(v=mean(j8)-sd(j8),col="blue", lty = "dashed")
abline(v=mean(j8)+sd(j8),col="blue", lty = "dashed")
```
:::

::::

### Question 05

$$
S = \{(x_1,x_2) | x_1,x_2 \in \{1,2,3,4,5,6\} \}
$$

Event $\mathbf{A}$ is defined as:

$$
A = \{max(x_1,x_2) < 3\}
$$

If $x_1,x_2 \in \{1,2\}$ the event $\mathbf{A}$ consists of the possible combinations of these values:

$$
A = \{(1,1),(1,2),(2,1),(2,2)\}
$$

$$
P(A) = \frac{4}{36} = \frac{1}{9} = 0.111111
$$

### Question 06
```{r}
prob6 <- function(n)
  {
  x1 <- sample(c(1,2,3,4,5,6),n,replace=T)
  x2 <- sample(c(1,2,3,4,5,6),n,replace=T)
  x <- cbind(x1,x2)
  x1.1 <- (x1<3)
  x2.1 <- (x2<3)
  comparar <- x1.1&x2.1
  probabilidade <- sum(comparar)/n
  print(probabilidade)
}
```

```{r}
prob6(1000)
```

### Question 07

$$
S_1 = \{(C,C,C),(C,C,K),(C,K,C),(C,K,K),\\(K,C,C),(K,C,K),(K,K,C),(K,K,K)\}
$$

$$
S_2 = \{1,2,3,4,5,6\}
$$


$$
A_1 = \{(C,K,K),(K,C,K),(K,K,C)\}
$$

$$
A_2 =\{1,3,5\}
$$

$$
P(A_1 \cap A_2) = \frac{3}{8} \times \frac{3}{6} = \frac{3}{16} = 0.1875
$$

### Question 08
```{r}
prob8 <- function(n)
  {
  saida <- NULL
  
  moeda1 <- sample(c(0,1), n, replace=TRUE)
  moeda2 <- sample(c(0,1), n, replace=TRUE) 
  moeda3 <- sample(c(0,1), n, replace=TRUE)
  
  moedas <- cbind(moeda1,moeda2,moeda3) 
  soma <- moedas[,1]+moedas[,2]+moedas[,3]
  soma1 <- moeda1+moeda2+moeda3
  soma2 <- mean(soma==2)
  
  dado <- sample(c(1,2,3,4,5,6))
  for(i in 1:n)
    {
    amostradado <- sample(dado)
    x <- amostradado[1]
    if (x==2|x==4|x==6){saida[i]="par"} else{saida[i]= "impar"}
  }
  
  saida2 <- 1*(saida=="impar")
  saida3 <- (saida2)/n
  
  probabilidade <- sum(soma2*saida3)
  
  return(probabilidade)
}
```

```{r}
prob8(1000) 
```


### Question 09

**(Question 05)**
```{r}
prob6_viciado <- function(n) {

  faces <- 1:6
  pesos <- c(1, 2, 1, 2, 1, 2) / sum(c(1, 2, 1, 2, 1, 2))
  
  x1 <- sample(faces, n, replace = TRUE, prob = pesos)
  x2 <- sample(faces, n, replace = TRUE, prob = pesos)
  
  evento <- (x1 < 3) & (x2 < 3)
  
  probabilidade <- sum(evento) / n
  
  return(probabilidade)
}
```

```{r}
prob6_viciado(10000)
```


**(Question 07)**

```{r}
prob8_viciado <- function(n) {
  
  moeda1 <- sample(c(0, 1), n, replace = TRUE)
  moeda2 <- sample(c(0, 1), n, replace = TRUE)
  moeda3 <- sample(c(0, 1), n, replace = TRUE)
  soma_moedas <- moeda1 + moeda2 + moeda3
  evento_moedas <- soma_moedas == 1
  
  faces <- 1:6
  pesos <- c(1, 2, 1, 2, 1, 2) / sum(c(1, 2, 1, 2, 1, 2))
  dado <- sample(faces, n, replace = TRUE, prob = pesos)
  evento_dado <- dado %% 2 == 1
  
  evento_total <- evento_moedas & evento_dado
  
  probabilidade <- sum(evento_total) / n
  
  return(probabilidade)
}

```

```{r}
prob8_viciado(10000)
```


### Question 10

**São misturadas novamente após cada tentativa falha**

Se as chaves são misturadas novamente após cada tentativa falha, cada tentativa é independente, e a probabilidade de escolher a chave correta é sempre $\frac{1}{4}$. Então a probabilidade de falhar em uma tentativa é $\frac{3}{4}$

Para que sejam necessárias mais de 3 tentativas, a pessoa precisa falhar nas 3 primeiras tentativas.

Espaço amostral ($\mathbf{S}$): Todas as sequências de tentativas até que a porta seja aberta.

Evento ($\mathbf{A}$): Todas as sequências com pelo menos 3 falhas antes do primeiro sucesso.

A probabilidade de falhar em 3 tentativas consecutivas é:
$$
P = \left( \frac{3}{4} \right)^3 = \frac{27}{64}
$$

**São separadas após cada tentativa falha**

$$
S = \{(n,n,n,s),(n,n,s,n),(n,s,n,n),(s,n,n,n) \}
$$

$$
A = \{(n,n,n,s)\}
$$

$$
P(A) = \frac{1}{4} = 0.25
$$

### Question 11

**São misturadas novamente após cada tentativa falha**

```{r}
prob11a <- function(n)
  {
  saida <- seq(1:n)
  chaves1 <- c(1,1,1,0)
  
  for(i in 1:n)
    {
    chaves2 <- sample(chaves1,replace=TRUE)
    a <- chaves2[1]
    b <- chaves2[2]
    d <- chaves2[3]
    cbind(a,b,d)
    if(a==0){saida[i]="probabilidade1"}
    if(a==1 & b==0) {saida[i]="probabilidade2"}
    if(a==1 & b==1 & d==0 ){saida[i]="probabilidade3"} 
    if(a==1 & b==1 & d==1 ){saida[i]="probabilidade4"}
  }
  
  saida2 <- 1*(saida=="probabilidade1")
  saida3 <- 1*(saida=="probabilidade2")
  saida4 <- 1*(saida=="probabilidade3")
  saida5 <- ((saida2)/n)+((saida3)/n)+((saida4)/n)
  probabilidadeab <- 1-sum(saida5)
  
  return(probabilidadeab)
}
```

```{r}
prob11a(1000)
```

**São separadas após cada tentativa falha**

```{r}
prob11b <- function(n)
  {
  saida <- seq(1:n)
  chaves1 <- c(1,1,1,0)
  
  for(i in 1:n)
    {
    chaves2 <- sample(chaves1,replace=FALSE)
    a <- chaves2[1]
    b <- chaves2[2]
    d <- chaves2[3]
    cbind(a,b,d)
    if(a==0){saida[i]="probabilidade1"}
    if(a==1 & b==0) {saida[i]="probabilidade2"}
    if(a==1 & b==1 & d==0 ){saida[i]="probabilidade3"} 
    if(a==1 & b==1 & d==1 ){saida[i]="probabilidade4"}
  }
  
  saida2 <- 1*(saida=="probabilidade1")
  saida3 <- 1*(saida=="probabilidade2")
  saida4 <- 1*(saida=="probabilidade3")
  saida5 <- ((saida2)/n)+((saida3)/n)+((saida4)/n)
  probabilidadeab <- 1-sum(saida5)
  
  return(probabilidadeab)
}
```

```{r}
prob11b(1000)
```

### Question 12

- Existem 3 caixas: $\mathbf{A}$, $\mathbf{B}$, $\mathbf{C}$.

- Uma contém o prêmio, e as outras duas estão vazias.

- O jogador escolhe inicialmente uma caixa (vamos supor que escolheu $\mathbf{A}$).

**Probabilidades iniciais**

- A probabilidade de o prêmio estar em $\mathbf{A}$ é: 

$$
P(A) = \frac{1}{3}
$$

- A probabilidade de o prêmio estar nas outras duas caixas (  $\mathbf{B}$ ou $\mathbf{C}$) é:

$$
P(B \cup C) = \frac{2}{3}
$$

**Após abrir uma caixa vazia**

- O prêmio estiver na caixa:

$$
P(A) = \frac{1}{3}
$$

- O prêmio está na outra caixa:

$$
P(B) = \frac{2}{3} \quad or \quad P(C) = \frac{2}{3}
$$

**Conclusão**
Matematicamente, as probabilidades mostram que:

- Trocar: $P = \frac{2}{3}$ (vantagem)

- Não trocar: $P = \frac{1}{3}$

Portanto, **é mais vantajoso trocar de caixa!**

### Question 13

```{r}
prob13=function(n)
  {
  saida <- seq(1:n)
  caixa <- c(1,2,3)
  
  for(i in 1:n)
    {
    caixa2 <- sample(caixa,replace=TRUE)
    a <- caixa2[1]
    b <- caixa2[2]
    comparar <- a==b
    cbind(a,b,comparar)
    
    if(comparar==TRUE){saida[i]="SIM"} else {saida[i]="NAO"}
    }
  saida2 <- 1*(saida=="NAO")
  saida3 <- sum(saida2)
  probab <- (saida3)/n
  return(probab)
}
```

```{r}
prob13(10000)
```


## Introdução à teoria de probabilidade

```{r}
simulacao <- function(n)
  {
  fornecedores <- c("A", "B", "C")
  proporcoes <- c(0.3, 0.3, 0.4) # Proporção dos fornecedores
  prob_ruim <- c(0.1, 0.05, 0.02) # Probabilidade de produto ruim
  
  produtos <- sample(fornecedores, size = n, replace = TRUE, prob = proporcoes)
  
  # Simulação de qualidade
  ruim <- rep(FALSE, n)
  ruim[produtos == "A"] <- runif(sum(produtos == "A")) < prob_ruim[1]
  ruim[produtos == "B"] <- runif(sum(produtos == "B")) < prob_ruim[2]
  ruim[produtos == "C"] <- runif(sum(produtos == "C")) < prob_ruim[3]
  
  # Resultados
  # A) Probabilidade do produto ser ruim
  prob_produto_ruim <- mean(ruim)
  
  # B) Probabilidade de ser do fornecedor B dado que é ruim
  prod_ruins <- produtos[ruim]
  prob_B_dado_ruim <- mean(prod_ruins == "B")
  
  # C) Fornecedor mais provável para reclamação
  mais_provavel_reclamacao <- names(which.max(table(prod_ruins)))
  
  # Retornar os resultados como uma lista
  return(list(
    prob_produto_ruim = prob_produto_ruim,
    prob_B_dado_ruim = prob_B_dado_ruim,
    mais_provavel_reclamacao = mais_provavel_reclamacao
  ))
}

resultados <- simulacao(10000)
```


Resultados:

```{r}
cat("A) Probabilidade do produto ser ruim:", resultados$prob_produto_ruim, "\n")
cat("B) Probabilidade de ser do fornecedor B dado que é ruim:", resultados$prob_B_dado_ruim, "\n")
cat("C) Fornecedor mais provável para reclamação:", resultados$mais_provavel_reclamacao, "\n")

```


## Se as v.a. X e Y são independentes

#### $E(XY) = E(X)E(Y)$

```{r}
sim <- function(n)
  {
  X <- rnorm(n, mean = 5, sd = 2)
  Y <- rnorm(n, mean = 10, sd = 3)
  EX <- mean(X)
  EY <- mean(Y)
  result <- list(
    EXY = mean(X * Y),
    EX = EX,
    EY = EY,
    EX_EY = EX*EY)
}
```

```{r}
s <- sim(10000)
s$EXY
s$EX_EY
```

#### $E(\frac{X}{Y}) \neq \frac{E(X)}{E(Y)}$

```{r}
sim <- function(n)
  {
  X <- rnorm(n, mean = 5, sd = 2)
  Y <- rnorm(n, mean = 10, sd = 3)
  EX <- mean(X)
  EY <- mean(Y)
  result <- list(
    E_XdivY = mean(X / Y),
    EX = EX,
    EY = EY,
    EX_div_EY = EX/EY)
}
```

```{r}
s1 <- sim(10000)
s1$E_XdivY
s1$EX_div_EY
```





